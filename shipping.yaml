- name: Shipping
  hosts: shipping
  tasks:
  - name: Installing maven
    ansible.builtin.package:
    name: maven
    state: present

  - name: Adding application User  
    ansible.builtin.user:
     name: roboshop

  - name: Recursively remove app directory
    ansible.builtin.file:
      path: /app
      state: absent   

  - name: Create a directory if it does not exist
    ansible.builtin.file:
      path: /app
      state: directory 

  - name: Downloading application cose
    ansible.builtin.get_url:
      url: https://roboshop-builds.s3.amazonaws.com/shipping.zip
      dest: /tmp

  - name: Extracting code
    ansible.builtin.unarchive:
      src: /tmp/shipping.zip
      dest: /app
      remote_src: yes

  - name: Installing Dependencies
    ansible.builtin.command: mvn clean package
    args:
      chdir: /app

  - name: rename jar file
    ansible.builtin.command: mv target/shipping-1.0.jar shipping.jar
    args:
      chdir: /app    

  - name: copying service file
    ansible.builtin.copy:
      src: shipping.service
      dest: /etc/systemd/system/shipping.service

  - name: deamon realod and start
    ansible.builtin.systemd_service:
      deamon_reload: true

  - name: installing mysql
    ansible.builtin.package:
      name: mysql
      state: present

  - name: check cities schema exists or not
    ansible.builtin.command:  mysql -h mysql.daws76s.online -uroot -p{{mysql_password}} -sN -e "SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'cities'"
    register: schema

  - name: print output
    ansible.builtin.debug:
      msg: "schema output: {{schema}}"

  - name: load cities data
    ansible.builtin.shell: "mysql -h mysql.daws76s.online -uroot -p{{mysql_password}}  < /app/schema/shipping.sql"
    when: schema.stdout != "1"

  - name: start and enable shipping
    ansible.builtin.service:
      name: shipping
      state: restarted
      enabled: yes     

      
